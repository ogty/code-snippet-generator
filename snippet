#!/usr/bin/env python3

from argparse import ArgumentParser
import os
import re
from subprocess import run
from typing import Any, List
import uuid

from models.diff_snippet import DiffSnippet
from models.simple_snippet import SimpleSnippet
from models.shell_snippet import ShellSnippet
from schemas.arg_parser import Arguments, SubCommand
from schemas.snippet import DiffSnippetConfig, SnippetConfig, ShellSnippetConfig
from settings import READ, NEWLINE, ENCODING, WRITE, SPACE
from utils.get_current_info import get_file_name


COMMIT_ID_PATTERN = re.compile(r"^commit (?P<commit_id>[a-f0-9]+)$")
PATTERN = re.compile(r"^(A|C|D|M|R|U|\?\?)\t(?P<file_path>.+)$")


def set_arguments(subcommand: Any, arguments: Arguments) -> Any:
    for argument in arguments:
        flags = argument.value.get("flags")
        if "action" in argument.value:
            subcommand.add_argument(*flags, action=argument.value.get("action"))
            continue
        other = {
            "type": argument.value.get("type"),
            "help": argument.value.get("help"),
            "required": argument.value.get("required"),
        }
        subcommand.add_argument(*flags, **other)
    return subcommand


def get_latest_commit_id_for_diff(target: str) -> List[str] | List[None]:
    commit_id = ""
    commit_ids = []

    logs = run(
        ["git", "log", "--name-status"], encoding=ENCODING, capture_output=True
    ).stdout.split(NEWLINE)

    for log in logs:
        if len(commit_ids) == 2:
            break
        if commit_id_matched := COMMIT_ID_PATTERN.match(log):
            commit_id = commit_id_matched.group("commit_id")
            continue
        if matched := PATTERN.match(log):
            file_path = matched.group("file_path")
            if target != file_path:
                continue
            commit_ids.insert(0, commit_id)

    if len(commit_ids) == 1:
        return ["%s^" % commit_ids[0], "HEAD"]
    return commit_ids


if __name__ == "__main__":
    try:
        terminal_width = os.get_terminal_size().columns
    except OSError:
        terminal_width = int(os.popen("tput cols", READ).read().strip())

    parser = ArgumentParser()
    sub_parser = parser.add_subparsers(title="subcommands", dest="subcommand")

    diff = sub_parser.add_parser(**SubCommand(name="diff", help=""))
    diff = set_arguments(
        subcommand=diff,
        arguments=[
            Arguments.file,
            Arguments.path,
            Arguments.width,
            Arguments.output,
            Arguments.current_file,
            Arguments.from_log,
        ],
    )

    simple = sub_parser.add_parser(**SubCommand(name="simple", help=""))
    simple = set_arguments(subcommand=simple, arguments=Arguments)

    shell = sub_parser.add_parser(**SubCommand(name="shell", help=""))
    shell = set_arguments(
        subcommand=shell,
        arguments=[
            Arguments.path,
            Arguments.width,
            Arguments.output,
            Arguments.prefix,
            Arguments.language,
            Arguments.command_prompt,
        ],
    )

    arguments = parser.parse_args()
    if sub_command_name := arguments.subcommand:
        width = arguments.width
        path = arguments.path
        output_path = arguments.output

        max_frame_width = width if width else terminal_width
        if sub_command_name == "diff":
            file = arguments.file
            is_from_log = arguments.from_log
            is_current_file = arguments.current_file
            if file is None or is_current_file:
                file = get_file_name(path=path)

            if is_from_log:
                commit_ids = get_latest_commit_id_for_diff(path)
                if not commit_ids:
                    print("No diff")
                    exit(0)
                diff = run(
                    ["git", "diff", commit_ids[0], commit_ids[1], "--", path],
                    encoding=ENCODING,
                    capture_output=True,
                ).stdout

                temporary_file_name = "%s.tmp.txt" % uuid.uuid4()
                with open(temporary_file_name, WRITE, encoding=ENCODING) as f:
                    f.write(diff.replace("\t", SPACE * 4))

            config = DiffSnippetConfig(
                language="",
                file_name=file,
                file_path=(temporary_file_name if is_from_log else path),
                output_path=output_path,
                max_frame_width=max_frame_width,
            )
            diff_snippet = DiffSnippet(config=config)
            output = diff_snippet.generate()
            if output_path:
                diff_snippet.write_output(output=output, file_path=output_path)
                exit(0)
            print(output)

            if is_from_log:
                os.remove(temporary_file_name)
        elif sub_command_name == "simple":
            file = arguments.file
            is_current_file = arguments.current_file
            if is_current_file:
                file = get_file_name(path=path)

            language = arguments.language
            prefix = arguments.prefix
            is_line_number = arguments.line_number
            start_line = arguments.start_line

            config = SnippetConfig(
                language=language,
                file_name=file,
                file_path=path,
                output_path=output_path,
                max_frame_width=max_frame_width,
            )
            simple_snippet = SimpleSnippet(config=config)
            output = simple_snippet.generate(
                prefix=prefix, is_line_number=is_line_number, start_line=start_line
            )
            if output_path:
                simple_snippet.write_output(output=output, file_path=output_path)
                exit(0)
            print(output)
        elif sub_command_name == "shell":
            shell_name = arguments.language
            prefix = arguments.prefix
            is_command_prompt = arguments.command_prompt

            config = ShellSnippetConfig(
                language=shell_name,
                file_path=path,
                output_path=output_path,
                max_frame_width=max_frame_width,
            )
            shell_snippet = ShellSnippet(config=config)
            output = shell_snippet.generate(
                prefix=prefix, is_command_prompt=is_command_prompt
            )
            if output_path:
                shell_snippet.write_output(output=output, file_path=output_path)
                exit(0)
            print(output)
        exit(0)
    parser.print_usage()
