#!/usr/bin/env python3

import os
import re
import uuid
from argparse import ArgumentParser
from subprocess import run
from typing import Any, List

from models.diff_snippet import DiffSnippet
from models.shell_snippet import ShellSnippet
from models.simple_snippet import SimpleSnippet
from schemas.arg_parser import Arguments, SubCommand
from schemas.snippet import (DiffSnippetConfig, ShellSnippetConfig,
                             SnippetConfig)
from settings import ENCODING, NEWLINE, READ, RED, RESET, SPACE, WRITE
from utils.get_current_info import get_file_name

STATUS_PATTERN = re.compile(r"^(A|C|D|M|R|U|\?\?)\t(?P<file_path>.+)$")
COMMIT_ID_PATTERN = re.compile(r"^commit (?P<commit_id>[a-f0-9]+)$")


def set_arguments(subcommand: Any, arguments: Arguments) -> Any:
    for argument in arguments:
        flags = argument.value.get("flags")
        if "action" in argument.value:
            subcommand.add_argument(*flags, action=argument.value.get("action"))
            continue
        other = {
            "type": argument.value.get("type"),
            "help": argument.value.get("help"),
            "required": argument.value.get("required"),
        }
        subcommand.add_argument(*flags, **other)
    return subcommand


def get_latest_commit_id_for_diff(target: str) -> List[str] | List[None]:
    commit_id = ""
    commit_ids = []

    logs = run(
        ["git", "log", "--name-status"], encoding=ENCODING, capture_output=True
    ).stdout.split(NEWLINE)

    for log in logs:
        if len(commit_ids) == 2:
            break
        if commit_id_matched := COMMIT_ID_PATTERN.match(log):
            commit_id = commit_id_matched.group("commit_id")
            continue
        if matched := STATUS_PATTERN.match(log):
            file_path = matched.group("file_path")
            if target != file_path:
                continue
            commit_ids.insert(0, commit_id)

    if len(commit_ids) == 1:
        return ["%s^" % commit_ids[0], "HEAD"]
    return commit_ids


def diff_operator(
    path: str, output_path: str, max_frame_width: str, arguments: Any
) -> None:
    file = arguments.get("file")
    is_from_log = arguments.get("from_log")

    if file is None or arguments.get("current_file"):
        file = get_file_name(path=path)

    if is_from_log:
        commit_ids = get_latest_commit_id_for_diff(path)
        if not commit_ids:
            print("No diff")
            exit(0)
        diff = run(
            ["git", "diff", commit_ids[0], commit_ids[1], "--", path],
            encoding=ENCODING,
            capture_output=True,
        ).stdout

        temporary_file_name = "%s.tmp.txt" % uuid.uuid4()
        with open(temporary_file_name, WRITE, encoding=ENCODING) as f:
            f.write(diff.replace("\t", SPACE * 4))

    config = DiffSnippetConfig(
        language="",
        file_name=file,
        file_path=(temporary_file_name if is_from_log else path),
        output_path=output_path,
    )
    diff_snippet = DiffSnippet(max_frame_width=max_frame_width, config=config)
    try:
        output = diff_snippet.generate()
        if output_path:
            diff_snippet.write_output(output=output, file_path=output_path)
            exit(0)
        print(output)
    except Exception as error:
        print(RED + error + RESET)
    finally:
        if is_from_log:
            os.remove(temporary_file_name)


def simple_operator(
    path: str, output_path: str, max_frame_width: str, arguments: Any
) -> None:
    start_line = arguments.get("start_line")
    start_line = 1 if start_line is None else start_line

    file = arguments.get("file")
    if arguments.get("current_file"):
        file = get_file_name(path=path)

    config = SnippetConfig(
        language=arguments.get("language"),
        file_name=file,
        file_path=path,
        output_path=output_path,
    )
    simple_snippet = SimpleSnippet(max_frame_width=max_frame_width, config=config)
    output = simple_snippet.generate(
        prefix=arguments.get("prefix"),
        is_line_number=arguments.get("line_number"),
        start_line=start_line,
    )
    if output_path:
        simple_snippet.write_output(output=output, file_path=output_path)
        exit(0)
    print(output)


def shell_operator(
    path: str, output_path: str, max_frame_width: str, arguments: Any
) -> None:
    config = ShellSnippetConfig(
        language=arguments.get("language"),
        file_path=path,
        output_path=output_path,
    )
    shell_snippet = ShellSnippet(max_frame_width=max_frame_width, config=config)
    output = shell_snippet.generate(
        prefix=arguments.get("prefix"),
        is_command_prompt=arguments.get("command_prompt"),
    )
    if output_path:
        shell_snippet.write_output(output=output, file_path=output_path)
        exit(0)
    print(output)


if __name__ == "__main__":
    try:
        terminal_width = os.get_terminal_size().columns
    except OSError:
        terminal_width = int(os.popen("tput cols", READ).read().strip())

    parser = ArgumentParser()
    sub_parser = parser.add_subparsers(title="subcommands", dest="subcommand")

    diff = sub_parser.add_parser(**SubCommand(name="diff", help=""))
    diff = set_arguments(
        subcommand=diff,
        arguments=[
            Arguments.file,
            Arguments.path,
            Arguments.width,
            Arguments.output,
            Arguments.from_log,
            Arguments.current_file,
        ],
    )

    simple = sub_parser.add_parser(**SubCommand(name="simple", help=""))
    simple = set_arguments(subcommand=simple, arguments=Arguments)

    shell = sub_parser.add_parser(**SubCommand(name="shell", help=""))
    shell = set_arguments(
        subcommand=shell,
        arguments=[
            Arguments.path,
            Arguments.width,
            Arguments.output,
            Arguments.prefix,
            Arguments.language,
            Arguments.command_prompt,
        ],
    )

    arguments = parser.parse_args()
    if sub_command_name := arguments.subcommand:
        path = arguments.path
        output_path = arguments.output
        max_frame_width = arguments.width if arguments.width else terminal_width
        arguments = {argument[0]: argument[1] for argument in arguments._get_kwargs()}

        if sub_command_name == "diff":
            diff_operator(
                path=path,
                arguments=arguments,
                output_path=output_path,
                max_frame_width=max_frame_width,
            )
        elif sub_command_name == "simple":
            simple_operator(
                path=path,
                arguments=arguments,
                output_path=output_path,
                max_frame_width=max_frame_width,
            )
        elif sub_command_name == "shell":
            shell_operator(
                path=path,
                arguments=arguments,
                output_path=output_path,
                max_frame_width=max_frame_width,
            )
        exit(0)
    parser.print_usage()
